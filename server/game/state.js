/* 
    State constructor assumes it has been called as a parent class. The child class should have
        1). this.game -- object of relevant game game.
        2). this.validators -- an array of validator functions. Each function should be constructed to accept the entire game object and throw an error if the validator fails.
        3). this.transitions -- a hash that matches transition names to state constructor functions.
        
*/

var State = function () {
    this.game = this.game || {};
    this.validators = this.validators || [];
    this.transitions = this.transitions || {};
};


/* 
   
   Returns validation object 
        -- contains array of errors (generated by the validation functions).
        -- has success property -- true if all validators passed.
   
*/

State.prototype.validate = function() {
    
    var validationAttempt = {};
    validationAttempt.sucess = true;
    
    this.validators.forEach(function(validator){
        try {
            validator(this.game);
        } catch(err) {
            if(!validationAttempt.errors) validationAttempt.errors = [];
            validationAttempt.errors.push(err.message);
            validationAttempt.sucess = false;
        }
    }.bind(this));
    
    return validationAttempt;
}


module.exports = State;

    
